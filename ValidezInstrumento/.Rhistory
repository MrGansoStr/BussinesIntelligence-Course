lines(density(normal_array, bw = 0.1), col = "red", lwd = 2)
# También puedes usar dnorm para graficar la distribución normal directamente
x <- seq(-10, 20, by=0.05)  # Ajusté el rango de x para que se vea mejor la distribución
y <- dnorm(x, mean = 5, sd = 1.1)
plot(x, y, type = "l", col = "green",
xlab = "Valores", ylab = "Densidad", main = "Distribución Normal")
# Agregar líneas verticales para marcar la media y +/- 1 desviación estándar
abline(v = c(5, 5 + 1.1, 5 - 1.1), col = c("blue", "red", "red"), lty = c(1, 2, 2))
legend("topright", legend = c("Densidad", "Media", "+/- 1 SD"),
col = c("green", "blue", "red"), lty = c(1, 1, 2))
#################################
# Generar más datos para obtener una curva más suave
normal_array <- rnorm(10000, mean = 5, sd = 1.1)
# Crear secuencia para el eje x con la misma longitud que normal_array
array_line_x <- seq_along(normal_array) * 10
# Graficar los puntos
plot(array_line_x, normal_array, type = "p", col = "blue",
xlab = "Índice", ylab = "Valores", main = "Distribución Normal")
# Añadir la curva de densidad con un ancho de ventana (bw) más pequeño para una curva más suave
lines(density(normal_array, bw = 0.1), col = "red", lwd = 2)
# Calcular la frecuencia relativa en porcentaje
freq_rel <- table(cut(normal_array, breaks = seq(min(normal_array), max(normal_array), by = 1))) / length(normal_array) * 100
# Agregar etiquetas con los porcentajes a la gráfica
text(seq(min(normal_array), max(normal_array), by = 1), 0, paste0(freq_rel, "%"), pos = 3, col = "blue")
#################################
# Generar más datos para obtener una curva más suave
normal_array <- rnorm(10000, mean = 5, sd = 1.1)
# Crear secuencia para el eje x con la misma longitud que normal_array
array_line_x <- seq_along(normal_array) * 10
# Graficar los puntos
plot(array_line_x, normal_array, type = "p", col = "blue",
xlab = "Índice", ylab = "Valores", main = "Distribución Normal")
# Añadir la curva de densidad con un ancho de ventana (bw) más pequeño para una curva más suave
lines(density(normal_array, bw = 0.1), col = "red", lwd = 2)
# Calcular la frecuencia relativa en porcentaje
freq_rel <- table(cut(normal_array, breaks = seq(min(normal_array), max(normal_array), by = 1))) / length(normal_array) * 100
# Agregar etiquetas con los porcentajes a la gráfica
text(seq(min(normal_array), max(normal_array), by = 1), 0, paste0(freq_rel, "%"), pos = 3, col = "blue")
#datos simulados
set.seed(8558)
grupoA_x <- seq(from = -3, to = 4, length.out = 100)
grupoA_y <- 6 + 0.15 * grupoA_x - 0.3 * grupoA_x^2 + rnorm(100, sd = 1
)
grupoA   <- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, g
rupo = "A")
grupoB_x <- rnorm(n = 100, mean = 0.5, sd = 0.8)
grupoB_y <- rnorm(n = 100, mean = 2, sd = 0.8)
grupoB   <- data.frame(variable_z = grupoB_x, variable_w = grupoB_y, g
rupo = "B")
datos <- rbind(grupoA, grupoB)
grupoA   <- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, g
rupo = "A")
#datos simulados
set.seed(8558)
grupoA_x <- seq(from = -3, to = 4, length.out = 100)
grupoA_y <- 6 + 0.15 * grupoA_x - 0.3 * grupoA_x^2 + rnorm(100, sd = 1
)
grupoA   <- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, g
rupo = "A")
grupoA   <- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, g
rupo = "A")
grupoA<- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, g
rupo = "A")
grupoA<- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, grupo = "A")
grupoB_x <- rnorm(n = 100, mean = 0.5, sd = 0.8)
grupoB_y <- rnorm(n = 100, mean = 2, sd = 0.8)
grupoB   <- data.frame(variable_z = grupoB_x, variable_w = grupoB_y, g
rupo = "B")
grupoB   <- data.frame(variable_z = grupoB_x, variable_w = grupoB_y, grupo = "B")
datos <- rbind(grupoA, grupoB)
X11()
plot(datos[, 1:2], col = datos$grupo, pch = 19)
library(ggplot2)
library(gridExtra)
p1 <- ggplot(data = datos, aes(x = variable_z, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
p2 <- ggplot(data = datos, aes(x = variable_w, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
grid.arrange(p1, p2)
par(mfcol = c(2, 2))
for (k in 1:2) {
x0 <- seq(min(datos[, k]), max(datos[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(datos$grupo)[i]
x <- datos[datos$grupo == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste("grupo", i0), xla
b = j0)
hist(x, proba = T, col = grey(0.8), main = paste("grupo", i0), xlab = j0)
x <- datos[datos$grupo == i0, j0]
j0 <- names(datos)[k]
for (k in 1:2) {
for (k in 1:2) {
j0 <- names(datos)[k]
x0 <- seq(min(datos[, k]), max(datos[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(datos$grupo)[i]
x <- datos[datos$grupo == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste("grupo", i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
for (k in 1:2) {
j0 <- names(datos)[k]
x0 <- seq(min(datos[, k]), max(datos[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(datos$grupo)[i]
x <- datos[datos$grupo == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste("grupo", i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
for (k in 1:2) {
j0 <- names(datos)[k]
x0 <- seq(min(datos[, k]), max(datos[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(datos$grupo)[i]
x <- datos[datos$grupo == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste("grupo", i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
par(mfcol = c(2, 2))
for (k in 1:2) {
j0 <- names(datos)[k]
x0 <- seq(min(datos[, k]), max(datos[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(datos$grupo)[i]
x <- datos[datos$grupo == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste("grupo", i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
p1 <- ggplot(data = datos, aes(x = variable_z, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
p2 <- ggplot(data = datos, aes(x = variable_w, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
grid.arrange(p1, p2)
X11()
plot(datos[, 1:2], col = datos$grupo, pch = 19)
#datos simulados
set.seed(8558)
grupoA_x <- seq(from = -3, to = 4, length.out = 100)
grupoA_y <- 6 + 0.15 * grupoA_x - 0.3 * grupoA_x^2 + rnorm(100, sd = 1
)
grupoA<- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, grupo = "A")
grupoB_x <- rnorm(n = 100, mean = 0.5, sd = 0.8)
grupoB_y <- rnorm(n = 100, mean = 2, sd = 0.8)
grupoB   <- data.frame(variable_z = grupoB_x, variable_w = grupoB_y, grupo = "B")
datos <- rbind(grupoA, grupoB)
X11()
plot(datos[, 1:2], col = datos$grupo, pch = 19)
library(ggplot2)
library(gridExtra)
p1 <- ggplot(data = datos, aes(x = variable_z, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
p2 <- ggplot(data = datos, aes(x = variable_w, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
grid.arrange(p1, p2)
par(mfcol = c(2, 2))
for (k in 1:2) {
j0 <- names(datos)[k]
x0 <- seq(min(datos[, k]), max(datos[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(datos$grupo)[i]
x <- datos[datos$grupo == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste("grupo", i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
#datos simulados
set.seed(8558)
grupoA_x <- seq(from = -3, to = 4, length.out = 100)
grupoA_y <- 6 + 0.15 * grupoA_x - 0.3 * grupoA_x^2 + rnorm(100, sd = 1
)
grupoA_y <- 6 + 0.15 * grupoA_x - 0.3 * grupoA_x^2 + rnorm(100, sd = 1)
grupoA<- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, grupo = "A")
grupoB_x <- rnorm(n = 100, mean = 0.5, sd = 0.8)
grupoB_y <- rnorm(n = 100, mean = 2, sd = 0.8)
grupoB   <- data.frame(variable_z = grupoB_x, variable_w = grupoB_y, grupo = "B")
datos <- rbind(grupoA, grupoB)
X11()
plot(datos[, 1:2], col = datos$grupo, pch = 19)
library(ggplot2)
library(gridExtra)
p1 <- ggplot(data = datos, aes(x = variable_z, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
p2 <- ggplot(data = datos, aes(x = variable_w, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
grid.arrange(p1, p2)
par(mfcol = c(2, 2))
for (k in 1:2) {
j0 <- names(datos)[k]
x0 <- seq(min(datos[, k]), max(datos[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(datos$grupo)[i]
x <- datos[datos$grupo == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste("grupo", i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
#datos simulados
set.seed(8558)
grupoA_x <- seq(from = -3, to = 4, length.out = 100)
grupoA_y <- 6 + 0.15 * grupoA_x - 0.3 * grupoA_x^2 + rnorm(100, sd = 1)
grupoA<- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, grupo = "A")
grupoB_x <- rnorm(n = 100, mean = 0.5, sd = 0.8)
grupoB_y <- rnorm(n = 100, mean = 2, sd = 0.8)
grupoB   <- data.frame(variable_z = grupoB_x, variable_w = grupoB_y, grupo = "B")
datos <- rbind(grupoA, grupoB)
X11()
plot(datos[, 1:2], col = datos$grupo, pch = 19)
library(ggplot2)
library(gridExtra)
p1 <- ggplot(data = datos, aes(x = variable_z, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
p2 <- ggplot(data = datos, aes(x = variable_w, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
grid.arrange(p1, p2)
par(mfcol = c(2, 2))
for (k in 1:2) {
j0 <- names(datos)[k]
x0 <- seq(min(datos[, k]), max(datos[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(datos$grupo)[i]
x <- datos[datos$grupo == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste("grupo", i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
#datos simulados
set.seed(8558)
grupoA_x <- seq(from = -3, to = 4, length.out = 100)
grupoA_y <- 6 + 0.15 * grupoA_x - 0.3 * grupoA_x^2 + rnorm(100, sd = 1)
grupoA<- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, grupo = "A")
grupoB_x <- rnorm(n = 100, mean = 0.5, sd = 0.8)
grupoB_y <- rnorm(n = 100, mean = 2, sd = 0.8)
grupoB   <- data.frame(variable_z = grupoB_x, variable_w = grupoB_y, grupo = "B")
datos <- rbind(grupoA, grupoB)
X11()
plot(datos[, 1:2], col = datos$grupo, pch = 19)
plot(datos[, 1:2], col = datos$grupo, pch = 19)
grupoA <- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, grupo = "A")
grupoB_x <- rnorm(n = 100, mean = 0.5, sd = 0.8)
grupoB_y <- rnorm(n = 100, mean = 2, sd = 0.8)
grupoB   <- data.frame(variable_z = grupoB_x, variable_w = grupoB_y, grupo = "B")
datos <- rbind(grupoA, grupoB)
plot(datos[, 1:2], col = datos$grupo, pch = 19)
library(ggplot2)
library(gridExtra)
p1 <- ggplot(data = datos, aes(x = variable_z, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
p2 <- ggplot(data = datos, aes(x = variable_w, fill = grupo)) +
geom_histogram(position = "identity", alpha = 0.5)
grid.arrange(p1, p2)
par(mfcol = c(2, 2))
for (k in 1:2) {
j0 <- names(datos)[k]
x0 <- seq(min(datos[, k]), max(datos[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(datos$grupo)[i]
x <- datos[datos$grupo == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste("grupo", i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
grupoA_x <- seq(from = -3, to = 4, length.out = 100)
grupoA_y <- 6 + 0.15 * grupoA_x - 0.3 * grupoA_x^2 + rnorm(100, sd = 1)
grupoA <- data.frame(variable_z = grupoA_x, variable_w = grupoA_y, grupo = "A")
grupoB_x <- rnorm(n = 100, mean = 0.5, sd = 0.8)
grupoB_y <- rnorm(n = 100, mean = 2, sd = 0.8)
grupoB   <- data.frame(variable_z = grupoB_x, variable_w = grupoB_y, grupo = "B")
datos <- rbind(grupoA, grupoB)
X11()
plot(datos[, 1:2], col = datos$grupo, pch = 19)
View(grupoA)
plot(datos[, 1:2], col = datos$grupo, pch = 19)
plot(datos[, 1:2], pch = 19)
X11()
plot(datos[, 1:2], pch = 19)
plot(datos[, 1:2], col = c("red", "blue")pch = 19)
plot(datos[, 1:2], col = c("red", "blue", )pch = 19)
X11()
plot(datos[, 1:2], col = c("red", "blue"), pch = 19)
datos$grupo
# Definir los parámetros
n1 <- 50
c1 <- 1
n2 <- 100
c2 <- 2
n3 <- 200
c3 <- 4
# Definir la fracción de defectuosos para la evaluación
p_defect <- seq(0, 0.05, by=0.0001)
# Función para calcular la probabilidad de aceptación
prob_acceptance <- function(n, c, p) {
sapply(p, function(p_i) sum(dbinom(0:c, n, p_i)))
}
# Calcular las probabilidades de aceptación para cada plan
Pa1 <- prob_acceptance(n1, c1, p_defect)
Pa2 <- prob_acceptance(n2, c2, p_defect)
Pa3 <- prob_acceptance(n3, c3, p_defect)
# Graficar las curvas OC
plot(p_defect, Pa1, type="l", col="blue", lwd=2, ylim=c(0,1),
ylab="Probabilidad de aceptación", xlab="Fracción de defectuosos",
main="Curvas Operativas Características")
lines(p_defect, Pa2, col="red", lwd=2)
lines(p_defect, Pa3, col="green", lwd=2)
# Añadir leyenda
legend("right", legend=c("n=50, c=1", "n=100, c=2", "n=200, c=4"),
col=c("blue", "red", "green"), lwd=2)
# Añadir líneas para NCA y NCL
abline(v=0.004, col="black", lty=2) # NCA = 0.4%
abline(v=0.0255, col="black", lty=2) # NCL = 2.55%
text(0.004, 0.9, "NCA = 0.4%", pos=4, col="black")
text(0.0255, 0.2, "NCL = 2.55%", pos=4, col="black")
# Mostrar los valores de probabilidad de aceptación para NCA y NCL
points(0.004, sum(dbinom(0:c1, n1, 0.004)), col="blue", pch=19)
points(0.004, sum(dbinom(0:c2, n2, 0.004)), col="red", pch=19)
points(0.004, sum(dbinom(0:c3, n3, 0.004)), col="green", pch=19)
points(0.0255, sum(dbinom(0:c1, n1, 0.0255)), col="blue", pch=19)
points(0.0255, sum(dbinom(0:c2, n2, 0.0255)), col="red", pch=19)
points(0.0255, sum(dbinom(0:c3, n3, 0.0255)), col="green", pch=19)
# Definir los parámetros
n1 <- 50
c1 <- 1
n2 <- 100
c2 <- 2
n3 <- 200
c3 <- 4
# Definir la fracción de defectuosos para la evaluación
p_defect <- seq(0, 0.05, by=0.001)
# Función para calcular la probabilidad de aceptación
prob_acceptance <- function(n, c, p) {
sapply(p, function(p_i) sum(dbinom(0:c, n, p_i)))
}
# Calcular las probabilidades de aceptación para cada plan
Pa1 <- prob_acceptance(n1, c1, p_defect)
Pa2 <- prob_acceptance(n2, c2, p_defect)
Pa3 <- prob_acceptance(n3, c3, p_defect)
# Graficar las curvas OC
plot(p_defect, Pa1, type="l", col="blue", lwd=2, ylim=c(0,1),
ylab="Probabilidad de aceptación", xlab="Fracción de defectuosos",
main="Curvas Operativas Características")
lines(p_defect, Pa2, col="red", lwd=2)
lines(p_defect, Pa3, col="green", lwd=2)
# Añadir leyenda
legend("right", legend=c("n=50, c=1", "n=100, c=2", "n=200, c=4"),
col=c("blue", "red", "green"), lwd=2)
# Añadir líneas para NCA y NCL
abline(v=0.004, col="black", lty=2) # NCA = 0.4%
abline(v=0.0255, col="black", lty=2) # NCL = 2.55%
text(0.004, 0.9, "NCA = 0.4%", pos=4, col="black")
text(0.0255, 0.2, "NCL = 2.55%", pos=4, col="black")
# Mostrar los valores de probabilidad de aceptación para NCA y NCL
points(0.004, sum(dbinom(0:c1, n1, 0.004)), col="blue", pch=19)
points(0.004, sum(dbinom(0:c2, n2, 0.004)), col="red", pch=19)
points(0.004, sum(dbinom(0:c3, n3, 0.004)), col="green", pch=19)
points(0.0255, sum(dbinom(0:c1, n1, 0.0255)), col="blue", pch=19)
points(0.0255, sum(dbinom(0:c2, n2, 0.0255)), col="red", pch=19)
points(0.0255, sum(dbinom(0:c3, n3, 0.0255)), col="green", pch=19)
# Definir los parámetros
n1 <- 50
c1 <- 1
n2 <- 100
c2 <- 2
n3 <- 200
c3 <- 4
# Definir la fracción de defectuosos para la evaluación
p_defect <- seq(0, 0.05, by=0.001)
# Función para calcular la probabilidad de aceptación
prob_acceptance <- function(n, c, p) {
sapply(p, function(p_i) sum(dbinom(0:c, n, p_i)))
}
# Calcular las probabilidades de aceptación para cada plan
Pa1 <- prob_acceptance(n1, c1, p_defect)
Pa2 <- prob_acceptance(n2, c2, p_defect)
Pa3 <- prob_acceptance(n3, c3, p_defect)
# Graficar las curvas OC
plot(p_defect, Pa1, type="l", col="blue", lwd=2, ylim=c(0,1),
ylab="Probabilidad de aceptación", xlab="Fracción de defectuosos",
main="Curvas Operativas Características")
lines(p_defect, Pa2, col="red", lwd=2)
lines(p_defect, Pa3, col="green", lwd=2)
# Añadir leyenda
legend("right", legend=c("n=50, c=1", "n=100, c=2", "n=200, c=4"),
col=c("blue", "red", "green"), lwd=2)
# Añadir líneas para NCA y NCL
abline(v=0.004, col="black", lty=2) # NCA = 0.4%
abline(v=0.0255, col="black", lty=2) # NCL = 2.55%
text(0.004, 0.9, "NCA = 0.4%", pos=4, col="black")
text(0.0255, 0.2, "NCL = 2.55%", pos=4, col="black")
# Mostrar los valores de probabilidad de aceptación para NCA y NCL
points(0.004, sum(dbinom(0:c1, n1, 0.004)), col="blue", pch=19)
points(0.004, sum(dbinom(0:c2, n2, 0.004)), col="red", pch=19)
points(0.004, sum(dbinom(0:c3, n3, 0.004)), col="green", pch=19)
points(0.0255, sum(dbinom(0:c1, n1, 0.0255)), col="blue", pch=19)
points(0.0255, sum(dbinom(0:c2, n2, 0.0255)), col="red", pch=19)
points(0.0255, sum(dbinom(0:c3, n3, 0.0255)), col="green", pch=19)
# Definir los parámetros
n1 <- 50
c1 <- 1
n2 <- 100
c2 <- 2
n3 <- 200
c3 <- 4
# Definir la fracción de defectuosos para la evaluación
p_defect <- seq(0, 0.05, by=0.01)
# Función para calcular la probabilidad de aceptación
prob_acceptance <- function(n, c, p) {
sapply(p, function(p_i) sum(dbinom(0:c, n, p_i)))
}
# Calcular las probabilidades de aceptación para cada plan
Pa1 <- prob_acceptance(n1, c1, p_defect)
Pa2 <- prob_acceptance(n2, c2, p_defect)
Pa3 <- prob_acceptance(n3, c3, p_defect)
# Graficar las curvas OC
plot(p_defect, Pa1, type="l", col="blue", lwd=2, ylim=c(0,1),
ylab="Probabilidad de aceptación", xlab="Fracción de defectuosos",
main="Curvas Operativas Características")
lines(p_defect, Pa2, col="red", lwd=2)
lines(p_defect, Pa3, col="green", lwd=2)
# Añadir leyenda
legend("right", legend=c("n=50, c=1", "n=100, c=2", "n=200, c=4"),
col=c("blue", "red", "green"), lwd=2)
# Añadir líneas para NCA y NCL
abline(v=0.004, col="black", lty=2) # NCA = 0.4%
abline(v=0.0255, col="black", lty=2) # NCL = 2.55%
text(0.004, 0.9, "NCA = 0.4%", pos=4, col="black")
text(0.0255, 0.2, "NCL = 2.55%", pos=4, col="black")
# Mostrar los valores de probabilidad de aceptación para NCA y NCL
points(0.004, sum(dbinom(0:c1, n1, 0.004)), col="blue", pch=19)
points(0.004, sum(dbinom(0:c2, n2, 0.004)), col="red", pch=19)
points(0.004, sum(dbinom(0:c3, n3, 0.004)), col="green", pch=19)
points(0.0255, sum(dbinom(0:c1, n1, 0.0255)), col="blue", pch=19)
points(0.0255, sum(dbinom(0:c2, n2, 0.0255)), col="red", pch=19)
points(0.0255, sum(dbinom(0:c3, n3, 0.0255)), col="green", pch=19)
# Definir los parámetros
n1 <- 50
c1 <- 1
n2 <- 100
c2 <- 2
n3 <- 200
c3 <- 4
# Definir la fracción de defectuosos para la evaluación
p_defect <- seq(0, 0.05, by=0.00001)
# Función para calcular la probabilidad de aceptación
prob_acceptance <- function(n, c, p) {
sapply(p, function(p_i) sum(dbinom(0:c, n, p_i)))
}
# Calcular las probabilidades de aceptación para cada plan
Pa1 <- prob_acceptance(n1, c1, p_defect)
Pa2 <- prob_acceptance(n2, c2, p_defect)
Pa3 <- prob_acceptance(n3, c3, p_defect)
# Graficar las curvas OC
plot(p_defect, Pa1, type="l", col="blue", lwd=2, ylim=c(0,1),
ylab="Probabilidad de aceptación", xlab="Fracción de defectuosos",
main="Curvas Operativas Características")
lines(p_defect, Pa2, col="red", lwd=2)
lines(p_defect, Pa3, col="green", lwd=2)
# Añadir leyenda
legend("right", legend=c("n=50, c=1", "n=100, c=2", "n=200, c=4"),
col=c("blue", "red", "green"), lwd=2)
# Añadir líneas para NCA y NCL
abline(v=0.004, col="black", lty=2) # NCA = 0.4%
abline(v=0.0255, col="black", lty=2) # NCL = 2.55%
text(0.004, 0.9, "NCA = 0.4%", pos=4, col="black")
text(0.0255, 0.2, "NCL = 2.55%", pos=4, col="black")
# Mostrar los valores de probabilidad de aceptación para NCA y NCL
points(0.004, sum(dbinom(0:c1, n1, 0.004)), col="blue", pch=19)
points(0.004, sum(dbinom(0:c2, n2, 0.004)), col="red", pch=19)
points(0.004, sum(dbinom(0:c3, n3, 0.004)), col="green", pch=19)
points(0.0255, sum(dbinom(0:c1, n1, 0.0255)), col="blue", pch=19)
points(0.0255, sum(dbinom(0:c2, n2, 0.0255)), col="red", pch=19)
points(0.0255, sum(dbinom(0:c3, n3, 0.0255)), col="green", pch=19)
library(lavaan)
library(semPlot)
library(mice)
datos <- read.csv("DataKaggle.csv")
setwd("C:/Disk_D/ParaTrabajosRapidos9/BussinesInteligence/ToSend/ValidezInstrumento")
library(lavaan)
library(semPlot)
library(mice)
datos <- read.csv("DataKaggle.csv")
modelo <- '
FactorA =~ A1a + A1b + A2a + A2b + A2c + A2d + A2e + A2f + A2g + A2h + A3a + A3b + A3c + A3d + A3e + A3f + A3g + A3h + A3i + A3j + A3k + A3l + A3m
FactorB =~ B1a + B1b + B2a + B2b + B2c + B2d + B3a + B3b + B3c + B3d + B4a + B4b + B4c + B4d + B5a + B5b + B5c + B5d
FactorC =~ C1a + C1b + C1c + C1d + C1e + C1f + C1g
'
imputed_data <-  mice(datos, method="sample")
full_data <- complete(imputed_data)
sum(is.na(full_data))
fit <- cfa(modelo, data = full_data)
summary(fit, fit.measures = TRUE, standardized = TRUE)
semPaths(fit, "std", layout = "tree", edge.label.cex = 0.8, sizeMan = 5, sizeLat = 7, residScale = 0.7)
summary(datos)
library(lavaan)
library(semPlot)
library(mice)
datos <- read.csv("DataKaggle.csv")
sum(is.na(full_data))
sum(is.na(datos))
imputed_data <-  mice(datos, method="sample")
full_data <- complete(imputed_data)
sum(is.na(full_data))
modelo <- '
FactorA =~ A1a + A1b + A2a + A2b + A2c + A2d + A2e + A2f + A2g + A2h + A3a + A3b + A3c + A3d + A3e + A3f + A3g + A3h + A3i + A3j + A3k + A3l + A3m
FactorB =~ B1a + B1b + B2a + B2b + B2c + B2d + B3a + B3b + B3c + B3d + B4a + B4b + B4c + B4d + B5a + B5b + B5c + B5d
FactorC =~ C1a + C1b + C1c + C1d + C1e + C1f + C1g
'
fit <- cfa(modelo, data = full_data)
summary(fit, fit.measures = TRUE, standardized = TRUE)
View(full_data)
